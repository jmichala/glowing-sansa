{
    "0": {
        "nw": 2,
        "nr": 3,
        "sn": 1,
        "sname": "Early Python: Variable Types",
        "qn": 1,
        "pt": "black",
        "ptext": "a = 1<br />What type is a?",
        "qt": "options",
        "ans": 2,
        "at": "white",
        "a1": "1",
        "a2": "int",
        "a3": "string",
        "a4": "float",
        "ht": "The print statement allows python to create output. The print will cause python to print out whatever immediately follows it."
    },
    "1": {
        "nw": 2,
        "nr": 3,
        "sn": 1,
        "sname": "Early Python: Variable Types",
        "qn": 2,
        "pt": "black",
        "ptext": "b = 'Hello World', what type is b?",
        "qt": "options",
        "ans": 2,
        "at": "white",
        "a1": "string",
        "a2": "int",
        "a3": "bool",
        "a4": "tuple",
        "ht": "Remember, you can always run the code and check the output!"
    },
    "2": {
        "nw": 3,
        "nr": 5,
        "sn": 1,
        "sname": "Early Python: Variable Types",
        "qn": 3,
        "pt": "black",
        "ptext": "a, b, c = 5, 'Programming is fun!', 5.4<br ;/>What types are a, b, and c?",
        "qt": "options",
        "ans": 3,
        "at": "white",
        "a1": "bool, tuple, int",
        "a2": "int, string, int",
        "a3": "int, string, float",
        "a4": "string, int, bool",
        "ht": "Remember, you can always run the code and check the output!"
    },
    "3": {
        "nw": 4,
        "nr": 5,
        "sn": 1,
        "sname": "Early Python: Variable Types",
        "qn": 4,
        "pt": "black",
        "ptext": "Point = (2,7)<br />What type is Point?",
        "qt": "options",
        "ans": 4,
        "at": "white",
        "a1": "float",
        "a2": "list",
        "a3": "int",
        "a4": "tuple",
        "ht": "Remember, you can always run the code and check the output!"
    },
    "4": {
        "nw": 5,
        "nr": 6,
        "sn": 1,
        "sname": "Early Python: Variable Types",
        "qn": 5,
        "pt": "black",
        "ptext": "Line = [1, 2, 4, 5, 8, 9]<br />What type is Line?",
        "qt": "options",
        "ans": 3,
        "at": "white",
        "a1": "tuple",
        "a2": "list",
        "a3": "sequence",
        "a4": "int",
        "ht": "Remember, you can always run the code and check the output!"
    },
    "5": {
        "nw": 6,
        "nr": 7,
        "sn": 1,
        "sname": "Early Python: Variable Types",
        "qn": 6,
        "pt": "black",
        "ptext": "I_Hungry = True<br />What type is I_Hungry?",
        "qt": "options",
        "ans": 1,
        "at": "white",
        "a1": "bool",
        "a2": "hello",
        "a3": "int",
        "a4": "string",
        "ht": "Remember, you can always run the code and check the output!"
    },
    "6": {
        "nw": 7,
        "nr": 8,
        "sn": 1,
        "sname": "Early Python: Variable Types",
        "qn": 7,
        "pt": "black",
        "ptext": "Decimal = 3.7897554<br />What type is Decimal?",
        "qt": "options",
        "ans": 4,
        "at": "white",
        "a1": "An integer number",
        "a2": "A bool",
        "a3": "A decimal",
        "a4": "a floating point number",
        "ht": "Remember, you can always run the code and check the output!"
    },
    "7": {
        "nw": 8,
        "nr": 9,
        "sn": 1,
        "sname": "Early Python: Variable Types",
        "qn": 8,
        "pt": "black",
        "ptext": "If A is a string, which of the following could A be?",
        "qt": "options",
        "ans": 1,
        "at": "white",
        "a1": "'I didn't sleep'",
        "a2": "5",
        "a3": "(2,3)",
        "a4": "True",
        "ht": "Remember, you can always run the code and check the output!"
    },
    "8": {
        "nw": 9,
        "nr": 10,
        "sn": 1,
        "sname": "Early Python: Basic Operators",
        "qn": 9,
        "pt": "black",
        "ptext": "a = '5'<br />b = '15'<br />what is the result of a+b?",
        "qt": "options",
        "ans": 3,
        "at": "white",
        "a1": "20",
        "a2": "'20'",
        "a3": "'515'",
        "a4": "515",
        "ht": "Remember, you can always run the code and check the output!"
    },
    "9": {
        "nw": 10,
        "nr": 11,
        "sn": 1,
        "sname": "Early Python: Basic Operators",
        "qn": 10,
        "pt": "black",
        "ptext": "first = 'Good'<br />second = 'morning'<br />what is a+b?",
        "qt": "options",
        "ans": 4,
        "at": "white",
        "a1": "Good Morning",
        "a2": "A bool",
        "a3": "42",
        "a4": "'Good Morning'",
        "ht": "Remember, you can always run the code and check the output!"
    },
    "10": {
        "nw": 11,
        "nr": 12,
        "sn": 1,
        "sname": "Early Python: Basic Operators",
        "qn": 11,
        "pt": "black",
        "ptext": "exponent = 2<br />base = 5<br />what is base**exponent?",
        "qt": "options",
        "ans": 1,
        "at": "white",
        "a1": "25",
        "a2": "10",
        "a3": "7",
        "a4": "'25'",
        "ht": "Remember, you can always run the code and check the output!"
    },
    "11": {
        "nw": 12,
        "nr": 13,
        "sn": 1,
        "sname": "Early Python: Basic Operators",
        "qn": 12,
        "pt": "black",
        "ptext": "Type a Boolean expression that will return false",
        "qt": "code",
        "ans": 2,
        "at": "white",
        "ht": " <li>Remember, you can always run the code and check the output!</li>",
        "ht2": "There are a variety of answers, for instance 1==2, True and False, etc."
    },
    "12": {
        "nw": 13,
        "nr": 14,
        "sn": 1,
        "sname": "Early Python: Basic Operators",
        "qn": 13,
        "pt": "black",
        "ptext": "What is the 8-bit representation of the integer 15?",
        "qt": "options",
        "ans": 4,
        "at": "white",
        "a1": "00000011",
        "a2": "10000100",
        "a3": "00000110",
        "a4": "00001111",
        "ht": "Remember, you can always run the code and check the output!"
    },
    "13": {
        "nw": 14,
        "nr": 15,
        "sn": 1,
        "sname": "Early Python: Basic Operators",
        "qn": 14,
        "pt": "black",
        "ptext": "What is 7 & 0?",
        "qt": "options",
        "ans": 2,
        "at": "white",
        "a1": "0",
        "a2": "1",
        "a3": "7.0",
        "a4": "70",
        "ht": "Remember, you can always run the code and check the output!"
    },
    "14": {
        "nw": 15,
        "nr": 16,
        "sn": 2,
        "sname": "Program Structure and Control Flow: Conditionals",
        "qn": 1,
        "pt": "black",
        "ptext": "if (5 < 4):<br />&nbsp;&nbsp;print 'really?'<br />elif (4 < 3):<br />&nbsp;&nbsp;print 'curious!'<br />elif (3 > 2):<br />&nbsp;&nbsp;print 'perhaps...'<br />else:<br />&nbsp;&nbsp;print 'why not?'<br /><br />print 'yippee!'<br /><br />What is the expected output?",
        "qt": "options",
        "ans": 3,
        "at": "white",
        "a1": "'perhaps...'",
        "a2": "'really'",
        "a3": "'perhaps...' and 'yippee'",
        "a4": "nothing",
        "ht": "Remember, you can always run the code and check the output!"
    },
    "15": {
        "nw": 16,
        "nr": 17,
        "sn": 2,
        "sname": "Program Structure and Control Flow: Conditionals",
        "qn": 2,
        "pt": "black",
        "ptext": "num = <br />for i in range (1, 7):<br />&nbsp;&nbsp;num = num+1<br /><br />How many iterations do you expect this loop will run?",
        "qt": "options",
        "ans": 2,
        "at": "white",
        "a1": "6",
        "a2": "5",
        "a3": "7",
        "a4": "8",
        "ht": "Remember, you can always run the code and check the output!"
    },
    "16": {
        "nw": 17,
        "nr": 18,
        "sn": 2,
        "sname": "Program Structure and Control Flow: Conditionals",
        "qn": 3,
        "pt": "black",
        "ptext": "SillyList = []<br />Using a for loop, type how you would make a list that includes every odd integer between 0 and 10",
        "qt": "code",
        "at": "white",
        "ht": "Test your code and make sure the output is correct!",
        "ht2": "A = []<br />for i in range(1, 10):<br />&nbsp;&nbsp;if i%2 != 0:<br />&nbsp;&nbsp;&nbsp;&nbsp;A.append(i)"
    },
    "17": {
        "nw": 18,
        "nr": 19,
        "sn": 1,
        "sname": "Program Structure and Control Flow: Conditionals",
        "qn": 4,
        "pt": "black",
        "ptext": "def isEvenPositive(x):<br />&nbsp;&nbsp;isEven = ((x % 2) == 0)<br />&nbsp;&nbsp;isPositive = (x > 0)<br />&nbsp;&nbsp;return (isEven and isPositive)<br /><br />What is the expected output of isEvenPositive(4):",
        "qt": "options",
        "ans": 1,
        "at": "white",
        "a1": "True",
        "a2": 3,
        "a3": "False",
        "a4": "a floating point number",
        "ht": "Remember, you can always run the code and check the output!"
    },
	"27": {
		"nw": 28,
		"nr": 39,
		"sn": 5,
		"sname": "More Complex Combinations",
		"qn":1,
		"pt": "black",
		"ptext": "What does the following code print?<br/>for( i in xrange(10)): <br/> if(i%3 == 1 or 2^i < 3): <br/> print i, \n",
		"qt": "options",
		"ans": 3,
		"at": "white",
		"a1": "0 1 3 6 9",
		"a2": "1\n3\n5\n8\n9",
		"a3": "0\n1\n2\n5\n8",
		"a4": "0 1 2 5 8",
		"ht": "When looking at the logical operator OR you can focus on each case independently; if one is true, you know that the output will occur even if the other condition is not met. For loops, try to visualize the values the variables hold in each iteration of the loop. Finally, be careful of what the print \n command does"
	},
	"28": {
		"nw": 39,
		"nr": 39,
		"sn": 5,
		"sname": "More Complex Combinations",
		"qn":2,
		"pt": "white",
		"ptext": "What code generates the following output? </br> 4",
		"qt": "options",
		"ans": 4,
		"at": "black",
		"a1": "nums = [2*n for x in xrange(3)]<br/>a = sum(nums)<br/>       return a",
		"a2": "int i=0<br/>       while(i<4):<br/>       &nbsp i+=1 <br/>       return i",
		"a3": "int a = 2^8 <br/>       a = a>>4<br/>       a *= 4<br/>       a %=3 <br/>       return a",
		"a4": "a = '123456789' </br>        for i in xrange(4,1,-1): <br/>        &nbsp; if (int(i%2==0): <br/>        &nbsp; &nbsp; print a[i] <br/>        &nbsp; else: pass<br/>        return a",
		"ht": "Don't fret when the problems look large. Try advancing choice by choice to see what they output and match it to the input. Try eliminating the answers you know are know before trying to guess. If you still have questions about lists and conditi0onals, go back to the previous sections to get a better understanding."
	},

	"39": {
		"nw": 48,
		"nr": 48,
		"sn": 5,
		"sname": "Strings and Formatting",
		"qn":1,
		"pt": "black",
		"ptext": "Write out the strings that are created from these operations <br/>        'Today I fed my %s and my %s' %s('lion','tiger') <br/>        'ABCDEFG'[5:0:-2] <br/>        'hello' * 3<br/>        'hello' + 'world' <br/>        'burt'.find('r')",
		"qt" : "code",
		"ans": 0,
		"at": "white",
		"a1": "0 1 3 6 9",
		"a2": "1\n3\n5\n8\n9",
		"a3": "0\n1\n2\n5\n8",
		"a4": "0 1 2 5 8",
		"ht2": "<li> %s operator refers to string formating</li>       <li> the [] indicate a substring </li>       <li> string multiply works like addition </li>       <li> strings can be combined through addition  </li>       <li> .find() returns the index of an element </li>",
		"ht": "'Today I fed my lion and my tiger'<br/>        'FDB' <br/>        'hellohellohello'<br/>        'helloworld'<br/>  2"
	},

	"48": {
		"nw": 28,
		"nr": 39,
		"sn": 5,
		"sname": "Defining Functions",
		"qn":1,
		"pt": "white",
		"ptext": "Given  a function f that takes in two integer values and returns the sum, choose which function header for f is correct.",
		"qt": "options",
		"ans": 2,
		"at": "black",
		"a1": "int f(int x,int y){",
		"a2": "def f(x,y):",
		"a3": "def f(int x, int y):",
		"a4": "int f(x,y){",
		"ht2": "<li> %s operator refers to string formating</li>       <li> the [] indicate a substring </li>       <li> string multiply works like addition </li>       <li> strings can be combined through addition  </li>       <li> .find() returns the index of an element </li>",
		"ht": "Python is a soft-type language which means that variable types do not have to be predetermined or forced to maintain a certain type."
	},



	"57": {
		"nw":58,
                "nr":60,
                "sn":9,
                "sname":"Recursion",
                "qn":1,
                "pt":"black",
                "ptext":"x=3<br />while (x > 0):<br />&nbsp;&nbsp;if (x==2):<br />&nbsp;&nbsp;&nbsp;&nbsp;print x<br />&nbsp;&nbsp;&nbsp;&nbsp;x=x-1",
                "qt":"options",
                "ans":1,
                "at":"white",
                "a1":"2",
                "a2":"3",
                "a3":"1",
                "a4":"0",
                "ht":"While statements check the condition stated next to them at the end of each iteration. You always must be sure to indent the lines within the while statement as well. The if statement will execute the text to the right of it when the condition next to it in parentheses is true, like the while statement. What happens to x with time?"
        },
	"58": {
		"nw":59,
                "nr":60,
                "sn":9,
                "sname":"Recursion",
                "qn":2,
                "pt":"black",
                "ptext":"def test(n):<br />&nbsp;&nbsp;if (n==0): print 0<br />&nbsp;&nbsp;else: <br />&nbsp;&nbsp;&nbsp;&nbsp;print n<br />&nbsp;&nbsp;&nbsp;&nbsp;test(n-1)<br />test(3)",
                "qt":"options",
                "ans":2,
                "at":"white",
                "a1":"0<br />1<br />2<br />3",
                "a2":"3<br />2<br />1<br />0",
                "a3":"0<br />1<br />2",
                "a4":"2<br />1<br />0",
                "ht":"This function calling itself is referred to as recursion. In a sense, it is very similar to a while loop. Once again, the execution will stop when n=0."
        },
	"64": {
		"nw":65,
                "nr":70,
                "sn":10,
                "sname":"Scope",
                "qn":1,
                "pt":"white",
                "ptext":"3",
                "qt":"options",
                "ans":1,
                "at":"white",
                "a1":"x=0<br />&nbsp;&nbsp;if (x==0):<br />&nbsp;&nbsp;&nbsp;&nbsp;x=3<br />print x",
                "a2":"x=0<br />&nbsp;&nbsp;if (x==0):<br />&nbsp;&nbsp;&nbsp;&nbsp;x=3<br />print x-1",
                "a3":"x=0<br />&nbsp;&nbsp;if (x==0):<br />&nbsp;&nbsp;&nbsp;&nbsp;x=2<br />print x",
                "a4":"x=0<br />&nbsp;&nbsp;if (x==0):<br />&nbsp;&nbsp;&nbsp;&nbsp;y=3<br />print x",
                "ht":"If statements, despite having separate blocks of code, will actually be able to modify the original definitions of the code. You will see an example of where the scope will be more significant soon."
        },
	"65": {
		"nw":66,
                "nr":70,
                "sn":10,
                "sname":"Scope",
                "qn":2,
                "pt":"black",
                "ptext":"def deltax(): x=3<br />x=2<br />deltax()<br />x=x-2<br />print x",
                "qt":"options",
                "ans":1,
                "at":"white",
                "a1":"0",
                "a2":"ERROR",
                "a3":"3",
                "a4":"1",
                "ht":"If statements, despite having separate blocks of code, will actually be able to modify the original definitions of the code. You will see an example of where the scope will be more significant soon."
        },
	"66": {
		"nw":67,
                "nr":70,
                "sn":10,
                "sname":"Scope",
                "qn":2,
                "pt":"black",
                "ptext":"Write a function test that takes x as input, prints it, and then returns the same value.",
                "qt":"code",
                "ans":1,
                "at":"white",
                "a1":"0",
                "a2":"ERROR",
                "a3":"3",
                "a4":"1",
                "ht":"def test(x):<br />&nbsp;&nbsp;print x<br />&nbsp;&nbsp;return x",
		"ht2":"<li>Funcion definition</li><li>Output</li><li>Function ending</li>"
        }
}

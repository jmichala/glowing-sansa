{
	"0": {
		"nw":1,
		"nr":4,
		"sn":1,
		"sname":"Early Python",
		"qn":1,
		"pt":"black",
		"ptext":"print 'hello'",
		"qt":"options",
		"ans":2,
		"at":"white",
		"a1":"print",
		"a2":"hello",
		"a3":"Print",
		"a4":"Hello",
		"ht":"The print statement allows python to create output. The print will cause python to print out whatever immediately follows it."
	},
	"1": {
		"nw":2,
		"nr":4,
		"sn":1,
		"sname":"Early Python",
		"qn":2,
		"pt":"black",
		"ptext":"print 'test'",
		"qt":"options",
		"ans":2,
		"at":"white",
		"a1":"print",
		"a2":"test",
		"a3":"'test'",
		"a4":"hello",
		"ht":"The print statement allows python to create output. The print will cause python to print out whatever immediately follows it."
	},
	"27": {
		"nw": 28,
		"nr": 39,
		"sn": 5,
		"sname": "More Complex Combinations",
		"qn":1,
		"pt": "black",
		"ptext": "What does the following code print?<br/>for( i in xrange(10)): <br/> if(i%3 == 1 or 2^i < 3): <br/> print i, \n",
		"qt": "options",
		"ans": 3,
		"at": "white",
		"a1": "0 1 3 6 9",
		"a2": "1\n3\n5\n8\n9",
		"a3": "0\n1\n2\n5\n8",
		"a4": "0 1 2 5 8",
		"ht": "When looking at the logical operator OR you can focus on each case independently; if one is true, you know that the output will occur even if the other condition is not met. For loops, try to visualize the values the variables hold in each iteration of the loop. Finally, be careful of what the print \n command does"
	},
	"28": {
		"nw": 39,
		"nr": 39,
		"sn": 5,
		"sname": "More Complex Combinations",
		"qn":2,
		"pt": "white",
		"ptext": "What code generates the following output? </br> 4",
		"qt": "options",
		"ans": 4,
		"at": "black",
		"a1": "nums = [2*n for x in xrange(3)]<br/>a = sum(nums)<br/>       return a",
		"a2": "int i=0<br/>       while(i<4):<br/>       &nbsp i+=1 <br/>       return i",
		"a3": "int a = 2^8 <br/>       a = a>>4<br/>       a *= 4<br/>       a %=3 <br/>       return a",
		"a4": "a = '123456789' </br>        for i in xrange(4,1,-1): <br/>        &nbsp; if (int(i%2==0): <br/>        &nbsp; &nbsp; print a[i] <br/>        &nbsp; else: pass<br/>        return a",
		"ht": "Don't fret when the problems look large. Try advancing choice by choice to see what they output and match it to the input. Try eliminating the answers you know are know before trying to guess. If you still have questions about lists and conditi0onals, go back to the previous sections to get a better understanding."
	},

	"39": {
		"nw": 48,
		"nr": 48,
		"sn": 5,
		"sname": "Strings and Formatting",
		"qn":1,
		"pt": "black",
		"ptext": "Write out the strings that are created from these operations <br/>        'Today I fed my %s and my %s' %s('lion','tiger') <br/>        'ABCDEFG'[5:0:-2] <br/>        'hello' * 3<br/>        'hello' + 'world' <br/>        'burt'.find('r')",
		"qt" : "code",
		"ans": 0,
		"at": "white",
		"a1": "0 1 3 6 9",
		"a2": "1\n3\n5\n8\n9",
		"a3": "0\n1\n2\n5\n8",
		"a4": "0 1 2 5 8",
		"ht": "<li> %s operator refers to string formating</li>       <li> the [] indicate a substring </li>       <li> string multiply works like addition </li>       <li> strings can be combined through addition  </li>       <li> .find() returns the index of an element </li>",
		"ht2": "'Today I fed my lion and my tiger'<br/>        'FDB' <br/>        'hellohellohello'<br/>        'helloworld'<br/>  2"
	},

	"48": {
		"nw": 28,
		"nr": 39,
		"sn": 5,
		"sname": "Defining Functions",
		"qn":1,
		"pt": "white",
		"ptext": "Given  a function f that takes in two integer values and returns the sum, choose which function header for f is correct.",
		"qt": "options",
		"ans": 2,
		"at": "black",
		"a1": "int f(int x,int y){",
		"a2": "def f(x,y):",
		"a3": "def f(int x, int y):",
		"a4": "int f(x,y){",
		"ht": "<li> %s operator refers to string formating</li>       <li> the [] indicate a substring </li>       <li> string multiply works like addition </li>       <li> strings can be combined through addition  </li>       <li> .find() returns the index of an element </li>",
		"ht2": "'Today I fed my lion and my tiger'<br/>        'FDB' <br/>        'hellohellohello'<br/>        'helloworld'<br/>2"
	},



	"57": {
		"nw":58,
                "nr":60,
                "sn":9,
                "sname":"Recursion",
                "qn":1,
                "pt":"black",
                "ptext":"x=3<br />while (x > 0):<br />&nbsp;&nbsp;if (x==2):<br />&nbsp;&nbsp;&nbsp;&nbsp;print x<br />&nbsp;&nbsp;&nbsp;&nbsp;x=x-1",
                "qt":"options",
                "ans":1,
                "at":"white",
                "a1":"2",
                "a2":"3",
                "a3":"1",
                "a4":"0",
                "ht":"While statements check the condition stated next to them at the end of each iteration. You always must be sure to indent the lines within the while statement as well. The if statement will execute the text to the right of it when the condition next to it in parentheses is true, like the while statement. What happens to x with time?"
        },
	"58": {
		"nw":59,
                "nr":60,
                "sn":9,
                "sname":"Recursion",
                "qn":2,
                "pt":"black",
                "ptext":"def test(n):<br />&nbsp;&nbsp;if (n==0): print 0<br />&nbsp;&nbsp;else: <br />&nbsp;&nbsp;&nbsp;&nbsp;print n<br />&nbsp;&nbsp;&nbsp;&nbsp;test(n-1)<br />test(3)",
                "qt":"options",
                "ans":2,
                "at":"white",
                "a1":"0<br />1<br />2<br />3",
                "a2":"3<br />2<br />1<br />0",
                "a3":"0<br />1<br />2",
                "a4":"2<br />1<br />0",
                "ht":"This function calling itself is referred to as recursion. In a sense, it is very similar to a while loop. Once again, the execution will stop when n=0."
        },
	"64": {
		"nw":65,
                "nr":70,
                "sn":10,
                "sname":"Scope",
                "qn":1,
                "pt":"white",
                "ptext":"3",
                "qt":"options",
                "ans":1,
                "at":"white",
                "a1":"x=0<br />&nbsp;&nbsp;if (x==0):<br />&nbsp;&nbsp;&nbsp;&nbsp;x=3<br />print x",
                "a2":"x=0<br />&nbsp;&nbsp;if (x==0):<br />&nbsp;&nbsp;&nbsp;&nbsp;x=3<br />print x-1",
                "a3":"x=0<br />&nbsp;&nbsp;if (x==0):<br />&nbsp;&nbsp;&nbsp;&nbsp;x=2<br />print x",
                "a4":"x=0<br />&nbsp;&nbsp;if (x==0):<br />&nbsp;&nbsp;&nbsp;&nbsp;y=3<br />print x",
                "ht":"If statements, despite having separate blocks of code, will actually be able to modify the original definitions of the code. You will see an example of where the scope will be more significant soon."
        },
	"65": {
		"nw":66,
                "nr":70,
                "sn":10,
                "sname":"Scope",
                "qn":2,
                "pt":"black",
                "ptext":"def deltax(): x=3<br />x=2<br />deltax()<br />x=x-2<br />print x",
                "qt":"options",
                "ans":1,
                "at":"white",
                "a1":"0",
                "a2":"ERROR",
                "a3":"3",
                "a4":"1",
                "ht":"If statements, despite having separate blocks of code, will actually be able to modify the original definitions of the code. You will see an example of where the scope will be more significant soon."
        },
	"66": {
		"nw":67,
                "nr":70,
                "sn":10,
                "sname":"Scope",
                "qn":2,
                "pt":"black",
                "ptext":"Write a function test that takes x as input, prints it, and then returns the same value.",
                "qt":"code",
                "ans":1,
                "at":"white",
                "a1":"0",
                "a2":"ERROR",
                "a3":"3",
                "a4":"1",
                "ht":"def test(x):<br />&nbsp;&nbsp;print x<br />&nbsp;&nbsp;return x",
		"ht2":"<li>Funcion definition</li><li>Output</li><li>Function ending</li>"
        }
}
